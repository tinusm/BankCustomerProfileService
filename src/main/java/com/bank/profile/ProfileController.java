package com.bank.profile;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.bank.profile.Profile;
import com.bank.profile.ProfileRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/profile") // This means URL's start with /profile
									// (after Application path)
public class ProfileController {
	
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle
				// the data

	private ProfileRepository profileRepository;

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Profile> getAllUsers() {
		// This returns a JSON or XML with the users
		return profileRepository.findAll();
	}

	@GetMapping(path = "/all/{id}")
	public @ResponseBody Profile getProfile(@PathVariable Long id) {
		return profileRepository.findOne(id);
	}

	@PutMapping("/updateprofile/{id}")
	public ResponseEntity<Profile> updateProfile(@PathVariable(value = "id") Long id,
			@Valid @RequestBody Profile profileDetails) {
		Profile profile = profileRepository.findOne(id);
		if (profile == null) {
			return ResponseEntity.notFound().build();
		}
		if (profileDetails.getAccountid() != null) {
			profile.setAccountid(profileDetails.getAccountid());
		}
		if (profileDetails.getAddress() != null) {
			profile.setAddress(profileDetails.getAddress());
		}
		if (profileDetails.getEmailid() != null) {
			profile.setEmailid(profileDetails.getEmailid());
		}
		if (profileDetails.getPhonenumber() != null) {
			profile.setPhonenumber(profileDetails.getPhonenumber());
		}

		Profile updatedProfile = profileRepository.save(profile);
		return ResponseEntity.ok(updatedProfile);

	}
}
